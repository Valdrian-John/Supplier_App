import sys
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QStackedWidget, QLineEdit, QTableWidget,
    QTableWidgetItem, QHeaderView, QCheckBox, QFileDialog
)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont

# ---- ReportLab for PDF ----
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# ‚úÖ Register fonts
pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))   # handles ‚Ç±
pdfmetrics.registerFont(TTFont("SegoeUIEmoji", "seguiemj.ttf"))  # handles emojis

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Supplier Payment Workflow")
        self.setGeometry(200, 200, 1000, 600)

        self.deliveries = []
        self.payment_done = False  # track payment state

        container = QWidget()
        layout = QHBoxLayout(container)
        layout.setContentsMargins(0, 0, 0, 0)

        sidebar_widget = QWidget()
        sidebar_widget.setStyleSheet("background-color: #2c3e50;")
        sidebar = QVBoxLayout(sidebar_widget)
        sidebar.setAlignment(Qt.AlignmentFlag.AlignTop)
        sidebar.setContentsMargins(10, 20, 10, 10)

        button_style = """
            QPushButton {
                color: white;
                background-color: transparent;
                border: none;
                padding: 10px;
                text-align: left;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #34495e;
                border-radius: 5px;
            }
            QPushButton:pressed {
                background-color: #1abc9c;
            }
        """

        btn_deliveries = QPushButton("üì¶ Deliveries")
        btn_orders = QPushButton("üìù Orders")
        btn_invoices = QPushButton("üí≥ Invoices")
        btn_verification = QPushButton("‚úÖ Verification")

        for btn in [btn_deliveries, btn_orders, btn_invoices, btn_verification]:
            btn.setStyleSheet(button_style)
            btn.setCursor(Qt.CursorShape.PointingHandCursor)
            sidebar.addWidget(btn)

        self.stack = QStackedWidget()
        self.stack.setStyleSheet("background-color: #ecf0f1;")

        self.stack.addWidget(self.create_deliveries_page())
        self.stack.addWidget(self.create_orders_page())
        self.stack.addWidget(self.create_invoices_page())
        self.stack.addWidget(self.create_verification_page())

        btn_deliveries.clicked.connect(lambda: self.stack.setCurrentIndex(0))
        btn_orders.clicked.connect(lambda: self.refresh_orders())
        btn_invoices.clicked.connect(lambda: self.refresh_invoices())
        btn_verification.clicked.connect(lambda: self.refresh_verification())

        layout.addWidget(sidebar_widget, 1)
        layout.addWidget(self.stack, 4)

        self.setCentralWidget(container)

    # -------------------- Deliveries --------------------
    def create_deliveries_page(self):
        page = QWidget()
        layout = QVBoxLayout(page)

        title = QLabel("üì¶ Deliveries")
        title.setFont(QFont("Segoe UI", 18, QFont.Weight.Bold))
        layout.addWidget(title)

        self.deliveries_table = QTableWidget(0, 4)
        self.deliveries_table.setHorizontalHeaderLabels(["Product", "Quantity", "Price", "Delete"])
        self.deliveries_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.deliveries_table)

        input_layout = QHBoxLayout()
        self.input_product = QLineEdit()
        self.input_product.setPlaceholderText("Enter product name")
        self.input_quantity = QLineEdit()
        self.input_quantity.setPlaceholderText("Enter quantity")
        self.input_price = QLineEdit()
        self.input_price.setPlaceholderText("Enter price")
        add_button = QPushButton("Add Delivery")
        add_button.clicked.connect(self.add_delivery)

        input_layout.addWidget(self.input_product)
        input_layout.addWidget(self.input_quantity)
        input_layout.addWidget(self.input_price)
        input_layout.addWidget(add_button)

        layout.addLayout(input_layout)
        return page

    def add_delivery(self):
        product = self.input_product.text()
        quantity = self.input_quantity.text()
        price = self.input_price.text()

        if product and quantity and price:
            self.deliveries.append({"product": product, "quantity": int(quantity), "price": float(price)})
            row = self.deliveries_table.rowCount()
            self.deliveries_table.insertRow(row)
            self.deliveries_table.setItem(row, 0, QTableWidgetItem(product))
            self.deliveries_table.setItem(row, 1, QTableWidgetItem(quantity))
            self.deliveries_table.setItem(row, 2, QTableWidgetItem(f"‚Ç±{price}"))

            btn_delete = QPushButton("üóëÔ∏è")
            btn_delete.clicked.connect(lambda _, r=row: self.delete_delivery(r))
            self.deliveries_table.setCellWidget(row, 3, btn_delete)

            self.input_product.clear()
            self.input_quantity.clear()
            self.input_price.clear()

    def delete_delivery(self, row):
        if 0 <= row < len(self.deliveries):
            self.deliveries.pop(row)
            self.deliveries_table.removeRow(row)

    # -------------------- Orders --------------------
    def create_orders_page(self):
        page = QWidget()
        layout = QVBoxLayout(page)

        title = QLabel("üìù Orders (Cross-check)")
        title.setFont(QFont("Segoe UI", 18, QFont.Weight.Bold))
        layout.addWidget(title)

        self.orders_table = QTableWidget(0, 3)
        self.orders_table.setHorizontalHeaderLabels(["Product", "Quantity", "Delivered?"])
        self.orders_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.orders_table)

        return page

    def refresh_orders(self):
        self.stack.setCurrentIndex(1)
        self.orders_table.setRowCount(0)
        for d in self.deliveries:
            row = self.orders_table.rowCount()
            self.orders_table.insertRow(row)
            self.orders_table.setItem(row, 0, QTableWidgetItem(d["product"]))
            self.orders_table.setItem(row, 1, QTableWidgetItem(str(d["quantity"])))

            checkbox = QCheckBox()
            checkbox_container = QWidget()
            checkbox_layout = QHBoxLayout(checkbox_container)
            checkbox_layout.addWidget(checkbox)
            checkbox_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
            checkbox_layout.setContentsMargins(0, 0, 0, 0)
            self.orders_table.setCellWidget(row, 2, checkbox_container)

    # -------------------- Invoices --------------------
    def create_invoices_page(self):
        page = QWidget()
        layout = QVBoxLayout(page)

        title = QLabel("üí≥ Invoices")
        title.setFont(QFont("Segoe UI", 18, QFont.Weight.Bold))
        layout.addWidget(title)

        self.invoice_table = QTableWidget(0, 3)
        self.invoice_table.setHorizontalHeaderLabels(["Product", "Quantity", "Amount"])
        self.invoice_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.invoice_table)

        bottom_layout = QHBoxLayout()
        self.total_label = QLabel("Total: ‚Ç±0.00")
        self.total_label.setFont(QFont("Segoe UI", 14, QFont.Weight.Bold))
        bottom_layout.addWidget(self.total_label)

        self.pay_button = QPushButton("Generate Receipt")
        self.pay_button.setStyleSheet("background-color: #27ae60; color: white; padding: 8px; border-radius: 5px;")
        self.pay_button.clicked.connect(self.make_payment)
        bottom_layout.addWidget(self.pay_button)

        layout.addLayout(bottom_layout)

        return page

    def refresh_invoices(self):
        self.stack.setCurrentIndex(2)
        self.invoice_table.setRowCount(0)
        total = 0
        for d in self.deliveries:
            row = self.invoice_table.rowCount()
            self.invoice_table.insertRow(row)
            self.invoice_table.setItem(row, 0, QTableWidgetItem(d["product"]))
            self.invoice_table.setItem(row, 1, QTableWidgetItem(str(d["quantity"])))
            amount = d["quantity"] * d["price"]
            self.invoice_table.setItem(row, 2, QTableWidgetItem(f"‚Ç±{amount:,.2f}"))
            total += amount
        self.total_label.setText(f"Total: ‚Ç±{total:,.2f}")

    def make_payment(self):
        self.payment_done = True
        self.stack.setCurrentIndex(3)
        self.refresh_verification()

    # -------------------- Verification --------------------
    def create_verification_page(self):
        page = QWidget()
        layout = QVBoxLayout(page)

        title = QLabel("‚úÖ Verification Receipt")
        title.setFont(QFont("Segoe UI", 18, QFont.Weight.Bold))
        layout.addWidget(title)

        self.receipt_label = QLabel("No payments yet.")
        self.receipt_label.setFont(QFont("Segoe UI", 14))
        self.receipt_label.setStyleSheet("background-color: white; padding: 15px; border: 1px solid #bdc3c7;")
        self.receipt_label.setAlignment(Qt.AlignmentFlag.AlignTop)
        layout.addWidget(self.receipt_label)

        # ‚úÖ Button to download PDF
        self.pdf_button = QPushButton("Download PDF Receipt")
        self.pdf_button.setStyleSheet("background-color: #2980b9; color: white; padding: 8px; border-radius: 5px;")
        self.pdf_button.clicked.connect(self.generate_pdf_receipt)
        layout.addWidget(self.pdf_button)

        return page

    def refresh_verification(self):
        self.stack.setCurrentIndex(3)
        if not self.payment_done:
            self.receipt_label.setText("No payments yet.")
            return

        text = "üßæ Official Receipt\n\n"
        total = 0
        for d in self.deliveries:
            amount = d["quantity"] * d["price"]
            text += f"- {d['product']} | Qty: {d['quantity']} | Price: ‚Ç±{d['price']:,.2f} | Amount: ‚Ç±{amount:,.2f}\n"
            total += amount
        text += f"\nTOTAL: ‚Ç±{total:,.2f}\n\nPayver"
        self.receipt_label.setText(text)

    # -------------------- PDF Export --------------------
    def generate_pdf_receipt(self):   # üëà now inside MainWindow
        if not self.payment_done:
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self, "Save PDF", "receipt.pdf", "PDF Files (*.pdf)"
        )
        if not file_path:
            return

        c = canvas.Canvas(file_path, pagesize=A4)
        width, height = A4

        y = height - 50
        c.setFont("SegoeUIEmoji", 16)   # ‚úÖ Use emoji font here
        c.drawString(50, y, "üßæ Official Receipt")

        y -= 40
        total = 0
        for d in self.deliveries:
            amount = d["quantity"] * d["price"]
            c.setFont("DejaVuSans", 12)   # Peso + text
            line = (
                f"- {d['product']} | Qty: {d['quantity']} | "
                f"Price: ‚Ç±{d['price']:,.2f} | Amount: ‚Ç±{amount:,.2f}"
            )
            c.drawString(50, y, line)
            y -= 20
            total += amount

        y -= 20
        c.setFont("DejaVuSans", 14)
        c.drawString(50, y, f"TOTAL: ‚Ç±{total:,.2f}")

        y -= 30
        c.setFont("SegoeUIEmoji", 14)   # ‚úÖ Emoji font again
        c.drawString(50, y, "Status: PAID ‚úÖ")

        c.save()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
